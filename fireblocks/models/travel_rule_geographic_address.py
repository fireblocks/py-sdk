# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TravelRuleGeographicAddress(BaseModel):
    """
    TravelRuleGeographicAddress
    """ # noqa: E501
    street_name: Optional[StrictStr] = Field(default=None, alias="streetName")
    town_name: Optional[StrictStr] = Field(default=None, alias="townName")
    country: Optional[StrictStr] = None
    building_number: Optional[StrictStr] = Field(default=None, alias="buildingNumber")
    post_code: Optional[StrictStr] = Field(default=None, alias="postCode")
    address_type: Optional[StrictStr] = Field(default=None, alias="addressType")
    department: Optional[StrictStr] = None
    sub_department: Optional[StrictStr] = Field(default=None, alias="subDepartment")
    building_name: Optional[StrictStr] = Field(default=None, alias="buildingName")
    floor: Optional[StrictStr] = None
    post_box: Optional[StrictStr] = Field(default=None, alias="postBox")
    room: Optional[StrictStr] = None
    town_location_name: Optional[StrictStr] = Field(default=None, alias="townLocationName")
    district_name: Optional[StrictStr] = Field(default=None, alias="districtName")
    country_sub_division: Optional[StrictStr] = Field(default=None, alias="countrySubDivision")
    address_line: Optional[List[StrictStr]] = Field(default=None, alias="addressLine")
    __properties: ClassVar[List[str]] = ["streetName", "townName", "country", "buildingNumber", "postCode", "addressType", "department", "subDepartment", "buildingName", "floor", "postBox", "room", "townLocationName", "districtName", "countrySubDivision", "addressLine"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TravelRuleGeographicAddress from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TravelRuleGeographicAddress from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "streetName": obj.get("streetName"),
            "townName": obj.get("townName"),
            "country": obj.get("country"),
            "buildingNumber": obj.get("buildingNumber"),
            "postCode": obj.get("postCode"),
            "addressType": obj.get("addressType"),
            "department": obj.get("department"),
            "subDepartment": obj.get("subDepartment"),
            "buildingName": obj.get("buildingName"),
            "floor": obj.get("floor"),
            "postBox": obj.get("postBox"),
            "room": obj.get("room"),
            "townLocationName": obj.get("townLocationName"),
            "districtName": obj.get("districtName"),
            "countrySubDivision": obj.get("countrySubDivision"),
            "addressLine": obj.get("addressLine")
        })
        return _obj


