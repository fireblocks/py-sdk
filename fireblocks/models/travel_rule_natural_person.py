# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from fireblocks.models.travel_rule_date_and_place_of_birth import TravelRuleDateAndPlaceOfBirth
from fireblocks.models.travel_rule_geographic_address import TravelRuleGeographicAddress
from fireblocks.models.travel_rule_national_identification import TravelRuleNationalIdentification
from fireblocks.models.travel_rule_natural_person_name_identifier import TravelRuleNaturalPersonNameIdentifier
from typing import Optional, Set
from typing_extensions import Self

class TravelRuleNaturalPerson(BaseModel):
    """
    TravelRuleNaturalPerson
    """ # noqa: E501
    name: Optional[List[TravelRuleNaturalPersonNameIdentifier]] = None
    geographic_address: Optional[List[TravelRuleGeographicAddress]] = Field(default=None, alias="geographicAddress")
    national_identification: Optional[List[TravelRuleNationalIdentification]] = Field(default=None, alias="nationalIdentification")
    date_and_place_of_birth: Optional[List[TravelRuleDateAndPlaceOfBirth]] = Field(default=None, alias="dateAndPlaceOfBirth")
    customer_identification: Optional[StrictStr] = Field(default=None, alias="customerIdentification")
    country_of_residence: Optional[StrictStr] = Field(default=None, alias="countryOfResidence")
    customer_number: Optional[StrictStr] = Field(default=None, alias="customerNumber")
    country_of_registration: Optional[StrictStr] = Field(default=None, alias="countryOfRegistration")
    __properties: ClassVar[List[str]] = ["name", "geographicAddress", "nationalIdentification", "dateAndPlaceOfBirth", "customerIdentification", "countryOfResidence", "customerNumber", "countryOfRegistration"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TravelRuleNaturalPerson from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in name (list)
        _items = []
        if self.name:
            for _item in self.name:
                if _item:
                    _items.append(_item.to_dict())
            _dict['name'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in geographic_address (list)
        _items = []
        if self.geographic_address:
            for _item in self.geographic_address:
                if _item:
                    _items.append(_item.to_dict())
            _dict['geographicAddress'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in national_identification (list)
        _items = []
        if self.national_identification:
            for _item in self.national_identification:
                if _item:
                    _items.append(_item.to_dict())
            _dict['nationalIdentification'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in date_and_place_of_birth (list)
        _items = []
        if self.date_and_place_of_birth:
            for _item in self.date_and_place_of_birth:
                if _item:
                    _items.append(_item.to_dict())
            _dict['dateAndPlaceOfBirth'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TravelRuleNaturalPerson from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": [TravelRuleNaturalPersonNameIdentifier.from_dict(_item) for _item in obj["name"]] if obj.get("name") is not None else None,
            "geographicAddress": [TravelRuleGeographicAddress.from_dict(_item) for _item in obj["geographicAddress"]] if obj.get("geographicAddress") is not None else None,
            "nationalIdentification": [TravelRuleNationalIdentification.from_dict(_item) for _item in obj["nationalIdentification"]] if obj.get("nationalIdentification") is not None else None,
            "dateAndPlaceOfBirth": [TravelRuleDateAndPlaceOfBirth.from_dict(_item) for _item in obj["dateAndPlaceOfBirth"]] if obj.get("dateAndPlaceOfBirth") is not None else None,
            "customerIdentification": obj.get("customerIdentification"),
            "countryOfResidence": obj.get("countryOfResidence"),
            "customerNumber": obj.get("customerNumber"),
            "countryOfRegistration": obj.get("countryOfRegistration")
        })
        return _obj


