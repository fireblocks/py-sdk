# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json



from pydantic import BaseModel, Field, StrictFloat, StrictStr

class ConvertExchangeAccountRequest(BaseModel):
    """
    ConvertExchangeAccountRequest
    """
    src_asset: StrictStr = Field(..., alias="srcAsset", description="Name of the source asset (must be in a currency that is supported for conversions in the selected exchange type that corresponds to your exchange ID)")
    dest_asset: StrictStr = Field(..., alias="destAsset", description="Name of the destination asset (must be in a currency that is supported for conversions in the selected exchange type that corresponds to your exchange ID)")
    amount: StrictFloat = Field(..., description="The amount to transfer (in the currency of the source asset)")
    __properties = ["srcAsset", "destAsset", "amount"]

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ConvertExchangeAccountRequest:
        """Create an instance of ConvertExchangeAccountRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ConvertExchangeAccountRequest:
        """Create an instance of ConvertExchangeAccountRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return ConvertExchangeAccountRequest.parse_obj(obj)

        _obj = ConvertExchangeAccountRequest.parse_obj({
            "src_asset": obj.get("srcAsset"),
            "dest_asset": obj.get("destAsset"),
            "amount": obj.get("amount")
        })
        return _obj

