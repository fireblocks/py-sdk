# coding: utf-8

"""
    Fireblocks API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.6.2
    Contact: support@fireblocks.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
from inspect import getfullargspec
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from fireblocks_client.models.destination_transfer_peer_path import DestinationTransferPeerPath
from fireblocks_client.models.transaction_operation import TransactionOperation
from fireblocks_client.models.transaction_request_amount import TransactionRequestAmount
from fireblocks_client.models.transaction_request_destination import TransactionRequestDestination
from fireblocks_client.models.transaction_request_fee import TransactionRequestFee
from fireblocks_client.models.transaction_request_gas_limit import TransactionRequestGasLimit
from fireblocks_client.models.transaction_request_gas_price import TransactionRequestGasPrice
from fireblocks_client.models.transaction_request_network_fee import TransactionRequestNetworkFee
from fireblocks_client.models.transaction_request_network_staking import TransactionRequestNetworkStaking
from fireblocks_client.models.transaction_request_priority_fee import TransactionRequestPriorityFee
from fireblocks_client.models.transfer_peer_path import TransferPeerPath

class TransactionRequest(BaseModel):
    """
    TransactionRequest
    """
    operation: Optional[TransactionOperation] = None
    note: Optional[StrictStr] = Field(None, description="Custom note, not sent to the blockchain, to describe the transaction at your Fireblocks workspace.")
    external_tx_id: Optional[StrictStr] = Field(None, alias="externalTxId", description="An optional but highly recommended parameter. Fireblocks will reject future transactions with same ID.  You should set this to a unique ID representing the transaction, to avoid submitting the same transaction twice. This helps with cases where submitting the transaction responds with an error code due to Internet interruptions, but the transaction was actually sent and processed. To validate whether a transaction has been processed, [Find a specific transaction by external transaction ID](https://developers.fireblocks.com/reference/get_transactions-external-tx-id-externaltxid). There is no specific format required for this parameter.")
    asset_id: Optional[StrictStr] = Field(None, alias="assetId", description="The ID of the asset to transfer, for `TRANSFER`, `MINT` or `BURN` operations. [See the list of supported assets and their IDs on Fireblocks.](https://developers.fireblocks.com/reference/get_supported-assets)")
    source: Optional[TransferPeerPath] = None
    destination: Optional[DestinationTransferPeerPath] = None
    destinations: Optional[conlist(TransactionRequestDestination)] = Field(None, description="For UTXO based blockchains, you can send a single transaction to multiple destinations.")
    amount: Optional[TransactionRequestAmount] = None
    treat_as_gross_amount: Optional[StrictBool] = Field(None, alias="treatAsGrossAmount", description="When set to `true`, the fee will be deducted from the requested amount.")
    force_sweep: Optional[StrictBool] = Field(None, alias="forceSweep", description="For Polkadot, Kusama and Westend transactions only. When set to true, Fireblocks will empty the asset wallet.     **Note:** If set to true when the source account is exactly 1 DOT, the transaction will fail. Any amount more or less than 1 DOT succeeds. This is a Polkadot blockchain limitation.")
    fee_level: Optional[StrictStr] = Field(None, alias="feeLevel", description="For UTXO or EVM-based blockchains only. Defines the blockchain fee level which will be payed for the transaction. Alternatively, specific fee estimation parameters exist below.")
    fee: Optional[TransactionRequestFee] = None
    priority_fee: Optional[TransactionRequestPriorityFee] = Field(None, alias="priorityFee")
    fail_on_low_fee: Optional[StrictBool] = Field(None, alias="failOnLowFee", description="When set to `true`, in case the current `MEDIUM` fee level is higher than the one specified in the transaction, the transaction will fail to avoid getting stuck with no confirmations.")
    max_fee: Optional[StrictStr] = Field(None, alias="maxFee", description="The maximum fee (gas price or fee per byte) that should be payed for the transaction.  In case the current value of the requested `feeLevel` is higher than this requested maximum fee.  Represented by a numeric string for accurate precision.")
    gas_limit: Optional[TransactionRequestGasLimit] = Field(None, alias="gasLimit")
    gas_price: Optional[TransactionRequestGasPrice] = Field(None, alias="gasPrice")
    network_fee: Optional[TransactionRequestNetworkFee] = Field(None, alias="networkFee")
    replace_tx_by_hash: Optional[StrictStr] = Field(None, alias="replaceTxByHash", description="For EVM-based blockchains only. In case a transaction is stuck, specify the hash of the stuck transaction to replace it by this transaction with a higher fee, or to replace it with this transaction with a zero fee and drop it from the blockchain.")
    extra_parameters: Optional[Dict[str, Any]] = Field(None, alias="extraParameters", description="Additional protocol / operation specific key-value parameters:  For UTXO-based blockchain input selection, add the key `inputsSelection` with the value set the [input selection structure.](https://developers.fireblocks.com/reference/transaction-objects#inputsselection) The inputs can be retrieved from the [Retrieve Unspent Inputs endpoint.](https://developers.fireblocks.com/reference/get_vault-accounts-vaultaccountid-assetid-unspent-inputs)  For `RAW` operations, add the key `rawMessageData` with the value set to the [raw message data structure.](https://developers.fireblocks.com/reference/raw-signing-objects#rawmessagedata)  For `CONTRACT_CALL` operations, add the key `contractCallData` with the value set to the Ethereum smart contract Application Binary Interface (ABI) payload. The Fireblocks [development libraries](https://developers.fireblocks.com/docs/ethereum-development#convenience-libraries) are recommended for building contract call transactions. ")
    customer_ref_id: Optional[StrictStr] = Field(None, alias="customerRefId", description="The ID for AML providers to associate the owner of funds with transactions.")
    auto_staking: Optional[StrictBool] = Field(None, alias="autoStaking", description="This feature is no longer supported.")
    network_staking: Optional[TransactionRequestNetworkStaking] = Field(None, alias="networkStaking")
    cpu_staking: Optional[TransactionRequestNetworkStaking] = Field(None, alias="cpuStaking")
    __properties = ["operation", "note", "externalTxId", "assetId", "source", "destination", "destinations", "amount", "treatAsGrossAmount", "forceSweep", "feeLevel", "fee", "priorityFee", "failOnLowFee", "maxFee", "gasLimit", "gasPrice", "networkFee", "replaceTxByHash", "extraParameters", "customerRefId", "autoStaking", "networkStaking", "cpuStaking"]

    @validator('fee_level')
    def fee_level_validate_enum(cls, v):
        if v is None:
            return v

        if v not in ('LOW', 'MEDIUM', 'HIGH'):
            raise ValueError("must be one of enum values ('LOW', 'MEDIUM', 'HIGH')")
        return v

    class Config:
        populate_by_name = True
        validate_assignment = True
        arbitrary_types_allowed = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> TransactionRequest:
        """Create an instance of TransactionRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of destination
        if self.destination:
            _dict['destination'] = self.destination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in destinations (list)
        _items = []
        if self.destinations:
            for _item in self.destinations:
                if _item:
                    _items.append(_item.to_dict())
            _dict['destinations'] = _items
        # override the default output from pydantic by calling `to_dict()` of amount
        if self.amount:
            _dict['amount'] = self.amount.to_dict()
        # override the default output from pydantic by calling `to_dict()` of fee
        if self.fee:
            _dict['fee'] = self.fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of priority_fee
        if self.priority_fee:
            _dict['priorityFee'] = self.priority_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gas_limit
        if self.gas_limit:
            _dict['gasLimit'] = self.gas_limit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gas_price
        if self.gas_price:
            _dict['gasPrice'] = self.gas_price.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_fee
        if self.network_fee:
            _dict['networkFee'] = self.network_fee.to_dict()
        # override the default output from pydantic by calling `to_dict()` of network_staking
        if self.network_staking:
            _dict['networkStaking'] = self.network_staking.to_dict()
        # override the default output from pydantic by calling `to_dict()` of cpu_staking
        if self.cpu_staking:
            _dict['cpuStaking'] = self.cpu_staking.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> TransactionRequest:
        """Create an instance of TransactionRequest from a dict"""
        if obj is None:
            return None

        if type(obj) is not dict:
            return TransactionRequest.parse_obj(obj)

        _obj = TransactionRequest.parse_obj({
            "operation": obj.get("operation"),
            "note": obj.get("note"),
            "external_tx_id": obj.get("externalTxId"),
            "asset_id": obj.get("assetId"),
            "source": TransferPeerPath.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "destination": DestinationTransferPeerPath.from_dict(obj.get("destination")) if obj.get("destination") is not None else None,
            "destinations": [TransactionRequestDestination.from_dict(_item) for _item in obj.get("destinations")] if obj.get("destinations") is not None else None,
            "amount": TransactionRequestAmount.from_dict(obj.get("amount")) if obj.get("amount") is not None else None,
            "treat_as_gross_amount": obj.get("treatAsGrossAmount"),
            "force_sweep": obj.get("forceSweep"),
            "fee_level": obj.get("feeLevel"),
            "fee": TransactionRequestFee.from_dict(obj.get("fee")) if obj.get("fee") is not None else None,
            "priority_fee": TransactionRequestPriorityFee.from_dict(obj.get("priorityFee")) if obj.get("priorityFee") is not None else None,
            "fail_on_low_fee": obj.get("failOnLowFee"),
            "max_fee": obj.get("maxFee"),
            "gas_limit": TransactionRequestGasLimit.from_dict(obj.get("gasLimit")) if obj.get("gasLimit") is not None else None,
            "gas_price": TransactionRequestGasPrice.from_dict(obj.get("gasPrice")) if obj.get("gasPrice") is not None else None,
            "network_fee": TransactionRequestNetworkFee.from_dict(obj.get("networkFee")) if obj.get("networkFee") is not None else None,
            "replace_tx_by_hash": obj.get("replaceTxByHash"),
            "extra_parameters": obj.get("extraParameters"),
            "customer_ref_id": obj.get("customerRefId"),
            "auto_staking": obj.get("autoStaking"),
            "network_staking": TransactionRequestNetworkStaking.from_dict(obj.get("networkStaking")) if obj.get("networkStaking") is not None else None,
            "cpu_staking": TransactionRequestNetworkStaking.from_dict(obj.get("cpuStaking")) if obj.get("cpuStaking") is not None else None
        })
        return _obj

